<?php

namespace MuchoMasFacil\InPageEditBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\DependencyInjection\ContainerAware;

/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends EntityRepository
{

    private $content_definitions = array();

    public function setContentDefinitions($content_definitions)
    {
        $this->content_definitions = $content_definitions;
    }

    public function remove($handler)
    {
        $em = $this->getEntityManager();
        $content = $em->getRepository('MuchoMasFacilInPageEditBundle:Content')->find($handler);
        if ($content) {
            $em->remove($content);
            $em->flush();
        }
    }

    public function findOrCreateIfNotExist($handler, $content, $is_collection = false, $collection_length = null, $custom = array())
    {
        
        $params_default = $this->content_definitions['default'];

        $params_by_content = array();
        if (isset($this->content_definitions[$content])) {
            $params_by_content = $this->content_definitions[$content];
        }

        $params = array_merge($params_default, $params_by_content, $custom);

        $em = $this->getEntityManager();
        $content = $em->getRepository('MuchoMasFacilInPageEditBundle:Content')->find($handler);

        if (!$content){
            $entity_class = $params['entity_class'];
            $content = new \MuchoMasFacil\InPageEditBundle\Entity\Content();
            //set handler
            $content->setHandler($handler);
            //set params from defaults
            $content->setYmlParams($params['yml_params']);
            $content->setEditorRoles($params['editor_roles']);
            $content->setAdminRoles($params['admin_roles']);
            $content->setEntityClass($entity_class);
            $content->setRenderTemplate($params['render_template']);

            //set is_collection
            $content->setIsCollection($is_collection);

            //set collection_length
            $content->setCollectionLength($collection_length);

            //set content
            if (isset($params['content']))    {
                if (!is_array($params['content'])) {
                    if ($params['content'] instanceof $entity_class) {
                        $content->setContent(array($params['content']));
                    }
                }
                else {
                    $params_content_has_error = false;
                    foreach ($params['content'] as $object) {
                        if (!($object instanceof $entity_class)) {
                            $params_content_has_error = true;
                        }
                    }
                    if (!$params_content_has_error) {
                        $content->setContent($params['content']);
                    }
                }

            }
            else {
                $number_of_items_to_lorem_impsum = $params['lorem_ipsum_items_in_collection'];
                if (!$content->getIsCollection())  {
                    $number_of_items_to_lorem_impsum = 1;
                }
                $content_content = array();
                for ( $a = 0; $a < $number_of_items_to_lorem_impsum ; $a++ ) {
                    $object = new $entity_class();
                    $content_content[] = $object->getLoremIpsum();
                }
                $content->setContent($content_content);
            }

            $em->persist($content);
            $em->flush();

        }//!Content
        return $content;
    }


}

